name: facebookresearch/habitat-sim/nightly
on:
  schedule:
  - cron: 0 7 * * *
#   # 'filters' was not transformed because there is no suitable equivalent in GitHub Actions
env:
  AIHABITAT_CONDA_PWD: xxxxyj4V
  AIHABITAT_NIGHTLY_CONDA_PWD: xxxx9{uY
  CODECOV_TOKEN: xxxxb29f
jobs:
  lab_build_habitat:
    runs-on: ubuntu-latest
    env:
      FPS_THRESHOLD: 900
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        path: "./habitat-sim"
    - name: CPU info
      run: cat /proc/cpuinfo
    - uses: "./.github/actions/install_all_ubuntu_deps"
    - name: Download test data
      run: |-
        sudo apt install git-lfs
        git --version
        git-lfs --version
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat;
        conda install -y gitpython git-lfs
        cd habitat-sim
        git lfs install
        python src_python/habitat_sim/utils/datasets_download.py --uids ci_test_assets --replace --data-path data/ --no-prune
        ls -la data/scene_datasets/habitat-test-scenes/
    - name: Build habitat sim and documentation
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat;
        cd habitat-sim
        git submodule update --init --recursive --jobs 8
        pip install -r requirements.txt --progress-bar off
        pip install imageio imageio-ffmpeg
        conda install -y -c conda-forge doxygen=1.9.5
        conda install -y  jinja2 pygments docutils
        while [ ! -f ~/cuda_installed ]; do sleep 2; done # wait for CUDA
        sudo apt install --allow-change-held-packages \
            texlive-base \
            texlive-latex-extra \
            texlive-fonts-extra \
            texlive-fonts-recommended
        # Rebuild with all options enabled
        ./build.sh --with-cuda --with-bullet
        cd docs
        git submodule update --init
        ./build-public.sh
    - name: Install Habitat Sim and Habitat Lab
      run: |-
        echo $(date +%F) > ./date
        export PATH=$HOME/miniconda/bin:$PATH
        . activate habitat;
        cd habitat-sim
        #Rebuild headless
        python setup.py install --headless --with-bullet --with-cuda
        cd ..
        if [ ! -d ./habitat-lab ]
        then
          git clone -q --depth 1 https://github.com/facebookresearch/habitat-lab.git
        fi
        cd habitat-lab
        pip install -r habitat-lab/requirements.txt --progress-bar off
        ln -s ../habitat-sim/data data
        touch ~/miniconda/pip_deps_installed
    - name: Run Habitat Lab tests
      run: |-
        export PATH=$HOME/miniconda/bin:$PATH
        . activate habitat; cd habitat-lab
        pip install -e habitat-lab
        pip install -e habitat-baselines
        export PYTHONPATH=.:$PYTHONPATH
        export MULTI_PROC_OFFSET=0 && export MAGNUM_LOG=quiet && export HABITAT_SIM_LOG=quiet
        python -m pytest
    - name: save_cache
      uses: actions/cache@v3.3.2
      with:
        path: "./habitat-lab"
        key: habitat-lab-{{ checksum "./hablab_sha" }}-{{ checksum "./date" }}
    - name: Build Habitat Lab documentation
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat; cd habitat-lab
        # Install requirments first to avoid errors related to gym
        pip install -r habitat-lab/requirements.txt --progress-bar off
        pip install -e habitat-lab
        cd docs
        conda install -y -c conda-forge doxygen=1.9.5
        conda install -y  jinja2 pygments docutils
        ./build-public.sh
    - name: save_cache
      uses: actions/cache@v3.3.2
      with:
        path: "~/miniconda"
        key: conda-{{ checksum "habitat-sim/.circleci/config.yml" }}-{{ checksum "./date" }}
    - name: save_cache
      uses: actions/cache@v3.3.2
      with:
        path: "./habitat-sim/build/docs-public"
        key: docs-{{ .Branch }}-{{ .Environment.${{ github.sha }} }}
  install_and_test_ubuntu:
    runs-on: ubuntu-latest
    env:
      FPS_THRESHOLD: 900
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        path: "./habitat-sim"
    - name: CPU info
      run: cat /proc/cpuinfo
    - uses: "./.github/actions/install_all_ubuntu_deps"
    - name: Build, install habitat-sim
      run: |-
        export PATH=$HOME/miniconda/bin:$PATH
        . activate habitat;
        cd habitat-sim
        pip install -r requirements.txt --progress-bar off
        pip install imageio imageio-ffmpeg
        git submodule update --init --recursive --jobs 8
        python -u setup.py install --build-type "Release" --lto --headless --bullet
    - name: Ccache stats
      run: |-
        export PATH=$HOME/miniconda/bin:$PATH
        . activate habitat;
        ccache --show-stats
      if: always()
    - name: Download test data
      run: |-
        sudo apt install git-lfs
        git --version
        git-lfs --version
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat;
        conda install -y gitpython git-lfs
        cd habitat-sim
        git lfs install
        python src_python/habitat_sim/utils/datasets_download.py --uids ci_test_assets --replace --data-path data/ --no-prune
        ls -la data/scene_datasets/habitat-test-scenes/
    - name: Build Javascript bindings
      run: |-
        # Wait for npm and emscripten install. Note that npm is not strictly
        # required (see also Run JavaScript tests in this file).
        while [[ ! -f ~/emscripten_installed && ! -f ~/npm_deps_installed ]]; do sleep 2; done
        # switch to cmake 3.20 just for this step. The JS build requires
        # static Bullet libs, and Bullet static libs required CMake 3.13+.
        sudo rm /usr/local/bin/cmake
        sudo ln -s /opt/cmake320/bin/cmake /usr/local/bin/cmake
        cd habitat-sim
        . ~/.bashrc
        export PATH=$HOME/miniconda/bin:$PATH
        . activate habitat
        . ~/emsdk/emsdk_env.sh
        CMAKE_GENERATOR=Ninja ./build_js.sh --bullet --no-web-apps
        # switch back to cmake 3.12
        sudo rm /usr/local/bin/cmake
        sudo ln -s /opt/cmake312/bin/cmake /usr/local/bin/cmake
    - name: Display dependency versions
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat
        export CONDA_ENV_DUMP=conda_env_dump.log
        echo "pip freeze"           | tee -a $CONDA_ENV_DUMP
        pip freeze                  | tee -a $CONDA_ENV_DUMP
        echo "###########"          | tee -a $CONDA_ENV_DUMP
        echo "conda list"           | tee -a $CONDA_ENV_DUMP
        conda list                  | tee -a $CONDA_ENV_DUMP
        echo "###########"          | tee -a $CONDA_ENV_DUMP
        echo "habitat-sim commit"   | tee -a $CONDA_ENV_DUMP
        cat ./hablab_sha            | tee -a $CONDA_ENV_DUMP
    - uses: actions/upload-artifact@v4.0.0
      with:
        path: conda_env_dump.log
    - name: Run sim benchmark
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat; cd habitat-sim
        python examples/example.py --scene data/scene_datasets/habitat-test-scenes/van-gogh-room.glb --silent --test_fps_regression $FPS_THRESHOLD
    - name: Run sim tests
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat; cd habitat-sim
        export PYTHONPATH=$(pwd):$PYTHONPATH
        #This way, pytest shows partial progress
        export PYTHONUNBUFFERED=1
        # CUDA isn't needed until here
        while [ ! -f ~/cuda_installed ]; do sleep 2; done # wait for CUDA
        # run tests with code coverage
        CORRADE_TEST_COLOR=ON GTEST_COLOR=yes ./build.sh --headless \
          --bullet \
          --with-cuda \
          --build-datatool \
          --run-tests \
          --no-lto \
          --cmake-args='-DCMAKE_CXX_FLAGS="--coverage"'
        PYTHONPATH=src_python pytest -n 4 --durations=10 --cov-report=xml --cov=./
        #run the marked pytest-benchmark tests and print the results
        PYTHONPATH=src_python pytest -m sim_benchmarks
        #re-build without bullet and cuda and run physics tests again
        #TODO: instead of reinstall, do this with configuration
        ./build.sh --headless --cmake-args='-DCMAKE_CXX_FLAGS="--coverage"'
        PYTHONPATH=src_python pytest -n 4 --durations=10 --cov-report=xml --cov=./ --cov-append tests/test_physics.py tests/test_sensors.py
        # reference code to generate JS CodeConv
        # . ~/.bashrc
        # nvm use v11.9.0
        # . ~/emsdk/emsdk_env.sh
        # npm run test_with_coverage
    - name: Upload test coverage
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat; cd habitat-sim
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        #Uploading test coverage for Python code
        ./codecov -f coverage.xml -cF Python
        # reference code for uploading test coverage for JS code
        # ./codecov coverage_js/coverage-final.json -cF JavaScript
        #Uploading test coverage for C++ code
        lcov --directory . --capture --output-file coverage.info
        # Replaces -1 linecount with zero to prevent lcov from crashing:
        # https://github.com/psycofdj/coverxygen/issues/6
        sed -i -e 's/,-1$/,0/g' coverage.info
        #lcov --remove coverage.info "*/deps/*" --output-file coverage.info > /dev/null
        #lcov --remove coverage.info "*/test/*" --output-file coverage.info > /dev/null
        #lcov --remove coverage.info "*/tests/*" --output-file coverage.info > /dev/null
        ./codecov -f coverage.info -cF CPP
    - name: Build, install habitat-sim with audio and run audio_agent script
      run: |-
        export PATH=$HOME/miniconda/bin:$PATH
        . activate habitat;
        cd habitat-sim
        pip install -r requirements.txt --progress-bar off
        pip install imageio imageio-ffmpeg
        git submodule update --init --recursive --jobs 8
        python -u setup.py install --build-type "Release" --lto --headless --audio
        python examples/tutorials/audio_agent.py
    - name: save_cache
      uses: actions/cache@v3.3.2
      with:
        path: "/home/circleci/.ccache"
        key: ccache-{{ arch }}-{{ .Branch }}-{{ .BuildNum }}
    - name: Upload test coverage
      run: |-
        export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
        . activate habitat; cd habitat-sim
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        #Uploading test coverage for Python code
        ./codecov -f coverage.xml -cF Python
        # reference code for uploading test coverage for JS code
        # ./codecov coverage_js/coverage-final.json -cF JavaScript
        #Uploading test coverage for C++ code
        lcov --directory . --capture --output-file coverage.info
        # Replaces -1 linecount with zero to prevent lcov from crashing:
        # https://github.com/psycofdj/coverxygen/issues/6
        sed -i -e 's/,-1$/,0/g' coverage.info
        #lcov --remove coverage.info "*/deps/*" --output-file coverage.info > /dev/null
        #lcov --remove coverage.info "*/test/*" --output-file coverage.info > /dev/null
        #lcov --remove coverage.info "*/tests/*" --output-file coverage.info > /dev/null
        ./codecov -f coverage.info -cF CPP
  update_docs:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container:
      image: ubuntu
    needs:
    - install_and_test_ubuntu
    - lab_build_habitat
    steps:
    - uses: actions/checkout@v4.1.0
    - name: restore_cache
      uses: actions/cache@v3.3.2
      with:
        key: docs-{{ .Branch }}-{{ .Environment.${{ github.sha }} }}
        path: UPDATE_ME
    # Ensure parameter if_key_exists is set correctly
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2.6.1
      with:
        key: "${{ secrets.CIRCLE_CI_SSH_KEY }}"
        name: circle_ci_id_rsa
        known_hosts: "${{ secrets.CIRCLE_CI_KNOWN_HOSTS }}"
        if_key_exists: fail
    - name: Update public documentation
      run: |-
        # Update website
        git clone git@github.com:facebookmicrosites/habitat-website.git
        cd habitat-website
        git submodule update --init
        for dir in habitat-sim habitat-lab
        do
            rm -rf published/docs/${dir}
            cp -r ../habitat-sim/build/docs-public/${dir} published/docs/.
        done
        git config --global user.name "Habitat"
        git config --global user.email habitat@fb.com
        NOW=$(date +"%m-%d-%Y")
        git add .
        git diff-index --quiet HEAD || git commit -m "Build habitat-sim and habitat-lab ${NOW}"
        git push origin main
        # Deploy to public
        git checkout gh-pages
        git checkout main published
        sudo apt-get update || true
        sudo apt-get install -yq \
              rsync
        rsync -a published/ ./.
        rm -rf published
        git add .
        git diff-index --quiet HEAD || git commit -m "Build habitat-sim and habitat-lab ${NOW}"
        git push origin gh-pages
  build_conda_binaries:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
    - install_and_test_ubuntu
    env:
      FPS_THRESHOLD: 900
      AIHABITAT_CONDA_CHN: aihabitat-nightly
      AIHABITAT_CONDA_CHN_PWD_VAR: AIHABITAT_NIGHTLY_CONDA_PWD
      NIGHTLY_FLAG: "--nightly"
      CI_TEST: false
    steps:
    - uses: actions/checkout@v4.1.0
      with:
        path: "./habitat-sim"
    - name: Build conda Linux packages
      run: |-
        # export PATH=$HOME/miniconda/bin:$PATH
        # . activate habitat;
        cd habitat-sim/conda-build
        ${{ env.CI_TEST }}
        # Install anaconda to work with packages repo
        curl -O https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh
        bash Anaconda3-2020.11-Linux-x86_64.sh -b -p $HOME/anaconda
        export PATH=$HOME/anaconda/bin:$PATH
        # Delete old nightly builds
        python common/delete_old_night_packages.py --username ${{ env.AIHABITAT_CONDA_CHN }}  --password $${{ env.AIHABITAT_CONDA_CHN_PWD_VAR }} ${{ env.NIGHTLY_FLAG }} ${{ env.CI_TEST }}
        # install Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        apt-cache policy docker-ce
        sudo apt-get install -y docker-ce
        docker build -t hsim_condabuild_dcontainer -f Dockerfile .
        docker run -it --ipc=host --rm -v $(pwd)/../../:/remote \
            ${{ env.CI_TEST }} --env ${{ env.AIHABITAT_CONDA_CHN_PWD_VAR }} ${{ env.CI_TEST }} \
            hsim_condabuild_dcontainer \
            /bin/bash -c "source ~/.bashrc && conda activate py39 \
                          && cd /remote/habitat-sim/ && git config --global --add safe.directory '*' \
                          && cd /remote/habitat-sim/conda-build \
                          ${{ env.CI_TEST }} && yes | anaconda login --username ${{ env.AIHABITAT_CONDA_CHN }} --password \${${{ env.AIHABITAT_CONDA_CHN_PWD_VAR }}} ${{ env.CI_TEST }} --hostname "aihabitat-conda-ci-builder-linux" \
                          && python matrix_builder.py \
                            ${{ env.CI_TEST }} --ci_test ${{ env.CI_TEST }} \
                            ${{ env.CI_TEST }} --conda_upload ${{ env.NIGHTLY_FLAG }} ${{ env.CI_TEST }}"
  build_conda_osx:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-latest
    needs:
    - build_conda_binaries
    env:
      CI_TEST: false
      nightly: true
      AIHABITAT_CONDA_CHN: aihabitat-nightly
      AIHABITAT_CONDA_CHN_PWD_VAR: AIHABITAT_NIGHTLY_CONDA_PWD
    steps:
    - uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: 14.2.0
    - uses: actions/checkout@v4.1.0
      with:
        path: "./habitat-sim"
    - name: Conda Install OSX
      run: |-
        curl -o ~/miniconda.sh -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
        chmod +x ~/miniconda.sh
        ~/miniconda.sh -b -p $HOME/miniconda
        rm ~/miniconda.sh
        export PATH=$HOME/miniconda/bin:$PATH
        conda init "$(basename "${SHELL}")"
    - name: Conda OSX build
      run: |-
        export PATH=$HOME/miniconda/bin:$PATH
        source ~/.bash_profile
        conda activate
        conda install -y anaconda-client ccache cmake git ninja conda-build pip
        echo $(which -a python)
        pip install gitpython
        cd habitat-sim
        git submodule update --init --recursive --jobs 8
        pip install .
        pip uninstall -y habitat-sim
        rm -rf build
        (yes || true) | anaconda login --username ${{ env.AIHABITAT_CONDA_CHN }}  --password $${{ env.AIHABITAT_CONDA_CHN_PWD_VAR }} --hostname "aihabitat-conda-ci-builder-macos"
        ${{ env.CI_TEST }}
        conda config --set anaconda_upload yes ${{ env.CI_TEST }}
        cd conda-build
        export PYTHONIOENCODING="utf-8"
        python matrix_builder.py ${{ env.CI_TEST }} --ci_test ${{ env.CI_TEST }}  ${{ env.CI_TEST }} --conda_upload ${{ env.nightly }} --nightly ${{ env.nightly }} ${{ env.CI_TEST }}
